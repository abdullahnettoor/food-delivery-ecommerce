// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecases/interfaces/user_usecase.go
//
// Generated by this command:
//
//	mockgen -source=internal/usecases/interfaces/user_usecase.go -destination=mock/user_uc_mock.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	entities "github.com/abdullahnettoor/food-delivery-eCommerce/internal/domain/entities"
	request_models "github.com/abdullahnettoor/food-delivery-eCommerce/internal/models/request_models"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserUseCase is a mock of IUserUseCase interface.
type MockIUserUseCase struct {
	ctrl     *gomock.Controller
	recorder *MockIUserUseCaseMockRecorder
}

// MockIUserUseCaseMockRecorder is the mock recorder for MockIUserUseCase.
type MockIUserUseCaseMockRecorder struct {
	mock *MockIUserUseCase
}

// NewMockIUserUseCase creates a new mock instance.
func NewMockIUserUseCase(ctrl *gomock.Controller) *MockIUserUseCase {
	mock := &MockIUserUseCase{ctrl: ctrl}
	mock.recorder = &MockIUserUseCaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserUseCase) EXPECT() *MockIUserUseCaseMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockIUserUseCase) AddAddress(id string, req *request_models.NewAddressReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockIUserUseCaseMockRecorder) AddAddress(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockIUserUseCase)(nil).AddAddress), id, req)
}

// ChangePassword mocks base method.
func (m *MockIUserUseCase) ChangePassword(id string, req *request_models.ChangePasswordReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIUserUseCaseMockRecorder) ChangePassword(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIUserUseCase)(nil).ChangePassword), id, req)
}

// ForgotPassword mocks base method.
func (m *MockIUserUseCase) ForgotPassword(req *request_models.ForgotPasswordReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForgotPassword", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForgotPassword indicates an expected call of ForgotPassword.
func (mr *MockIUserUseCaseMockRecorder) ForgotPassword(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForgotPassword", reflect.TypeOf((*MockIUserUseCase)(nil).ForgotPassword), req)
}

// GetUserDetails mocks base method.
func (m *MockIUserUseCase) GetUserDetails(id string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDetails", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDetails indicates an expected call of GetUserDetails.
func (mr *MockIUserUseCaseMockRecorder) GetUserDetails(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDetails", reflect.TypeOf((*MockIUserUseCase)(nil).GetUserDetails), id)
}

// Login mocks base method.
func (m *MockIUserUseCase) Login(req *request_models.UserLoginReq) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIUserUseCaseMockRecorder) Login(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIUserUseCase)(nil).Login), req)
}

// ResetPassword mocks base method.
func (m *MockIUserUseCase) ResetPassword(req *request_models.ResetPasswordReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetPassword", req)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResetPassword indicates an expected call of ResetPassword.
func (mr *MockIUserUseCaseMockRecorder) ResetPassword(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetPassword", reflect.TypeOf((*MockIUserUseCase)(nil).ResetPassword), req)
}

// SendOtp mocks base method.
func (m *MockIUserUseCase) SendOtp(phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendOtp", phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendOtp indicates an expected call of SendOtp.
func (mr *MockIUserUseCaseMockRecorder) SendOtp(phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendOtp", reflect.TypeOf((*MockIUserUseCase)(nil).SendOtp), phone)
}

// SignUp mocks base method.
func (m *MockIUserUseCase) SignUp(req *request_models.UserSignUpReq) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", req)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockIUserUseCaseMockRecorder) SignUp(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockIUserUseCase)(nil).SignUp), req)
}

// UpdateAddress mocks base method.
func (m *MockIUserUseCase) UpdateAddress(userId, addressId string, req *request_models.UpdateAddressReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", userId, addressId, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockIUserUseCaseMockRecorder) UpdateAddress(userId, addressId, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockIUserUseCase)(nil).UpdateAddress), userId, addressId, req)
}

// UpdateUserDetails mocks base method.
func (m *MockIUserUseCase) UpdateUserDetails(id string, req *request_models.UpdateUserDetailsReq) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserDetails", id, req)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserDetails indicates an expected call of UpdateUserDetails.
func (mr *MockIUserUseCaseMockRecorder) UpdateUserDetails(id, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserDetails", reflect.TypeOf((*MockIUserUseCase)(nil).UpdateUserDetails), id, req)
}

// VerifyOtp mocks base method.
func (m *MockIUserUseCase) VerifyOtp(phone string, req *request_models.UserVerifyOtpReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyOtp", phone, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyOtp indicates an expected call of VerifyOtp.
func (mr *MockIUserUseCaseMockRecorder) VerifyOtp(phone, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyOtp", reflect.TypeOf((*MockIUserUseCase)(nil).VerifyOtp), phone, req)
}

// ViewAddress mocks base method.
func (m *MockIUserUseCase) ViewAddress(id, userId string) (*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAddress", id, userId)
	ret0, _ := ret[0].(*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAddress indicates an expected call of ViewAddress.
func (mr *MockIUserUseCaseMockRecorder) ViewAddress(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAddress", reflect.TypeOf((*MockIUserUseCase)(nil).ViewAddress), id, userId)
}

// ViewAllAddresses mocks base method.
func (m *MockIUserUseCase) ViewAllAddresses(userId string) (*[]entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ViewAllAddresses", userId)
	ret0, _ := ret[0].(*[]entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ViewAllAddresses indicates an expected call of ViewAllAddresses.
func (mr *MockIUserUseCaseMockRecorder) ViewAllAddresses(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ViewAllAddresses", reflect.TypeOf((*MockIUserUseCase)(nil).ViewAllAddresses), userId)
}
