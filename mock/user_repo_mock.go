// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/interfaces/user_repo.go
//
// Generated by this command:
//
//	mockgen -source=internal/repository/interfaces/user_repo.go -destination=mock/user_repo_mock.go
//

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"

	entities "github.com/abdullahnettoor/food-delivery-eCommerce/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserRepository is a mock of IUserRepository interface.
type MockIUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIUserRepositoryMockRecorder
}

// MockIUserRepositoryMockRecorder is the mock recorder for MockIUserRepository.
type MockIUserRepositoryMockRecorder struct {
	mock *MockIUserRepository
}

// NewMockIUserRepository creates a new mock instance.
func NewMockIUserRepository(ctrl *gomock.Controller) *MockIUserRepository {
	mock := &MockIUserRepository{ctrl: ctrl}
	mock.recorder = &MockIUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserRepository) EXPECT() *MockIUserRepositoryMockRecorder {
	return m.recorder
}

// AddAddress mocks base method.
func (m *MockIUserRepository) AddAddress(address *entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddAddress", address)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAddress indicates an expected call of AddAddress.
func (mr *MockIUserRepositoryMockRecorder) AddAddress(address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAddress", reflect.TypeOf((*MockIUserRepository)(nil).AddAddress), address)
}

// Block mocks base method.
func (m *MockIUserRepository) Block(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Block", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Block indicates an expected call of Block.
func (mr *MockIUserRepositoryMockRecorder) Block(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Block", reflect.TypeOf((*MockIUserRepository)(nil).Block), id)
}

// ChangePassword mocks base method.
func (m *MockIUserRepository) ChangePassword(id, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockIUserRepositoryMockRecorder) ChangePassword(id, newPassword any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockIUserRepository)(nil).ChangePassword), id, newPassword)
}

// Create mocks base method.
func (m *MockIUserRepository) Create(user *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIUserRepositoryMockRecorder) Create(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIUserRepository)(nil).Create), user)
}

// DeleteByPhone mocks base method.
func (m *MockIUserRepository) DeleteByPhone(phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteByPhone", phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteByPhone indicates an expected call of DeleteByPhone.
func (mr *MockIUserRepositoryMockRecorder) DeleteByPhone(phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteByPhone", reflect.TypeOf((*MockIUserRepository)(nil).DeleteByPhone), phone)
}

// FindAddressByUserID mocks base method.
func (m *MockIUserRepository) FindAddressByUserID(id, userId string) (*entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAddressByUserID", id, userId)
	ret0, _ := ret[0].(*entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAddressByUserID indicates an expected call of FindAddressByUserID.
func (mr *MockIUserRepositoryMockRecorder) FindAddressByUserID(id, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAddressByUserID", reflect.TypeOf((*MockIUserRepository)(nil).FindAddressByUserID), id, userId)
}

// FindAll mocks base method.
func (m *MockIUserRepository) FindAll() (*[]entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll")
	ret0, _ := ret[0].(*[]entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockIUserRepositoryMockRecorder) FindAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockIUserRepository)(nil).FindAll))
}

// FindAllAddressByUserID mocks base method.
func (m *MockIUserRepository) FindAllAddressByUserID(userId string) (*[]entities.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllAddressByUserID", userId)
	ret0, _ := ret[0].(*[]entities.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllAddressByUserID indicates an expected call of FindAllAddressByUserID.
func (mr *MockIUserRepositoryMockRecorder) FindAllAddressByUserID(userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllAddressByUserID", reflect.TypeOf((*MockIUserRepository)(nil).FindAllAddressByUserID), userId)
}

// FindByEmail mocks base method.
func (m *MockIUserRepository) FindByEmail(email string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByEmail", email)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByEmail indicates an expected call of FindByEmail.
func (mr *MockIUserRepositoryMockRecorder) FindByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByEmail", reflect.TypeOf((*MockIUserRepository)(nil).FindByEmail), email)
}

// FindByID mocks base method.
func (m *MockIUserRepository) FindByID(id string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", id)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockIUserRepositoryMockRecorder) FindByID(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockIUserRepository)(nil).FindByID), id)
}

// FindByPhone mocks base method.
func (m *MockIUserRepository) FindByPhone(phone string) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByPhone", phone)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByPhone indicates an expected call of FindByPhone.
func (mr *MockIUserRepositoryMockRecorder) FindByPhone(phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByPhone", reflect.TypeOf((*MockIUserRepository)(nil).FindByPhone), phone)
}

// Unblock mocks base method.
func (m *MockIUserRepository) Unblock(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unblock", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unblock indicates an expected call of Unblock.
func (mr *MockIUserRepositoryMockRecorder) Unblock(id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unblock", reflect.TypeOf((*MockIUserRepository)(nil).Unblock), id)
}

// Update mocks base method.
func (m *MockIUserRepository) Update(id string, user *entities.User) (*entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", id, user)
	ret0, _ := ret[0].(*entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockIUserRepositoryMockRecorder) Update(id, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockIUserRepository)(nil).Update), id, user)
}

// UpdateAddress mocks base method.
func (m *MockIUserRepository) UpdateAddress(addressId string, address *entities.Address) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAddress", addressId, address)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAddress indicates an expected call of UpdateAddress.
func (mr *MockIUserRepositoryMockRecorder) UpdateAddress(addressId, address any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAddress", reflect.TypeOf((*MockIUserRepository)(nil).UpdateAddress), addressId, address)
}

// Verify mocks base method.
func (m *MockIUserRepository) Verify(phone string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", phone)
	ret0, _ := ret[0].(error)
	return ret0
}

// Verify indicates an expected call of Verify.
func (mr *MockIUserRepositoryMockRecorder) Verify(phone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockIUserRepository)(nil).Verify), phone)
}
