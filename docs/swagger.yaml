definitions:
  entities.Address:
    properties:
      addressId:
        type: integer
      district:
        type: string
      houseName:
        type: string
      name:
        type: string
      phone:
        type: string
      pinCode:
        type: string
      state:
        type: string
      street:
        type: string
      userId:
        type: integer
    type: object
  entities.Cart:
    properties:
      cartId:
        type: integer
      dishes:
        items:
          $ref: '#/definitions/entities.CartItem'
        type: array
      sellerId:
        type: integer
    type: object
  entities.CartItem:
    properties:
      categoryId:
        type: integer
      description:
        type: string
      dishId:
        type: integer
      imageUrl:
        type: string
      isAvailable:
        type: boolean
      isVeg:
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      sellerId:
        type: integer
    type: object
  entities.Category:
    properties:
      categoryId:
        type: integer
      iconUrl:
        type: string
      name:
        type: string
    type: object
  entities.Dish:
    properties:
      categoryId:
        type: integer
      description:
        type: string
      dishId:
        type: integer
      imageUrl:
        type: string
      isAvailable:
        type: boolean
      isVeg:
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      sellerId:
        type: integer
    type: object
  entities.Order:
    properties:
      addressId:
        type: integer
      deliveryCharge:
        type: number
      deliveryDate:
        type: string
      discount:
        type: number
      itemCount:
        type: integer
      orderDate:
        type: string
      orderId:
        type: integer
      orderStatus:
        type: string
      paymentMethod:
        type: string
      paymentStatus:
        type: string
      sellerId:
        type: integer
      totalPrice:
        type: number
      transactionId:
        type: string
      userId:
        type: integer
    type: object
  entities.OrderItem:
    properties:
      categoryId:
        type: integer
      description:
        type: string
      dishId:
        type: integer
      imageUrl:
        type: string
      isAvailable:
        type: boolean
      isVeg:
        type: boolean
      name:
        type: string
      price:
        type: number
      quantity:
        type: integer
      sellerId:
        type: integer
    type: object
  entities.Seller:
    properties:
      description:
        type: string
      email:
        type: string
      name:
        type: string
      pinCode:
        type: string
      sellerId:
        type: integer
      status:
        type: string
    type: object
  entities.User:
    properties:
      email:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
      status:
        type: string
      userId:
        type: integer
    type: object
  req.AdminLoginReq:
    properties:
      email:
        type: string
      password:
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  req.CreateCategoryReq:
    properties:
      name:
        minLength: 3
        type: string
    required:
    - name
    type: object
  req.NewAddressReq:
    properties:
      district:
        type: string
      houseName:
        type: string
      name:
        type: string
      phone:
        type: string
      pinCode:
        type: string
      state:
        type: string
      street:
        type: string
    required:
    - district
    - houseName
    - name
    - phone
    - pinCode
    - state
    - street
    type: object
  req.NewOrderReq:
    properties:
      addressId:
        type: string
      paymentMethod:
        enum:
        - COD
        - Online
        type: string
    required:
    - addressId
    - paymentMethod
    type: object
  req.SellerLoginReq:
    properties:
      email:
        type: string
      password:
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  req.SellerSignUpReq:
    properties:
      confirmPassword:
        minLength: 3
        type: string
      description:
        type: string
      email:
        type: string
      name:
        minLength: 2
        type: string
      password:
        minLength: 3
        type: string
      pinCode:
        type: string
    required:
    - email
    - name
    - password
    - pinCode
    type: object
  req.UpdateCategoryReq:
    properties:
      name:
        minLength: 3
        type: string
    required:
    - name
    type: object
  req.UpdateDishReq:
    properties:
      categoryId:
        type: integer
      description:
        type: string
      isAvailable:
        type: boolean
      isVeg:
        type: boolean
      name:
        minLength: 3
        type: string
      price:
        minimum: 0
        type: number
      quantity:
        minimum: 0
        type: integer
    required:
    - categoryId
    - name
    - price
    - quantity
    type: object
  req.UpdateOrderStatusReq:
    properties:
      orderStatus:
        enum:
        - Cooking
        - Food Ready
        - Delivered
        type: string
    required:
    - orderStatus
    type: object
  req.UserLoginReq:
    properties:
      email:
        type: string
      password:
        minLength: 3
        type: string
    required:
    - email
    - password
    type: object
  req.UserSignUpReq:
    properties:
      confirmPassword:
        type: string
      email:
        type: string
      firstName:
        minLength: 3
        type: string
      lastName:
        type: string
      password:
        minLength: 3
        type: string
      phone:
        type: string
    required:
    - email
    - firstName
    - phone
    type: object
  req.UserVerifyOtpReq:
    properties:
      otp:
        type: string
    required:
    - otp
    type: object
  res.AdminLoginRes:
    properties:
      error:
        type: string
      message:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
  res.AllCategoriesRes:
    properties:
      categories:
        items:
          $ref: '#/definitions/entities.Category'
        type: array
      error:
        type: string
      message:
        type: string
      status:
        type: string
    type: object
  res.CommonRes:
    properties:
      error:
        type: string
      message:
        type: string
      result: {}
      status:
        type: string
    type: object
  res.DishListRes:
    properties:
      dishList:
        items:
          $ref: '#/definitions/entities.Dish'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  res.SellerListRes:
    properties:
      message:
        type: string
      sellerList:
        items:
          $ref: '#/definitions/entities.Seller'
        type: array
      status:
        type: string
    type: object
  res.SellerLoginRes:
    properties:
      message:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
  res.SingleDishRes:
    properties:
      dish:
        $ref: '#/definitions/entities.Dish'
      message:
        type: string
      status:
        type: string
    type: object
  res.SingleSellerRes:
    properties:
      message:
        type: string
      seller:
        $ref: '#/definitions/entities.Seller'
      status:
        type: string
    type: object
  res.UserListRes:
    properties:
      message:
        type: string
      status:
        type: string
      userList:
        items:
          $ref: '#/definitions/entities.User'
        type: array
    type: object
  res.UserLoginRes:
    properties:
      message:
        type: string
      status:
        type: string
      token:
        type: string
    type: object
  res.ViewAddressListRes:
    properties:
      addressList:
        items:
          $ref: '#/definitions/entities.Address'
        type: array
      message:
        type: string
      status:
        type: string
    type: object
  res.ViewAddressRes:
    properties:
      address:
        $ref: '#/definitions/entities.Address'
      message:
        type: string
      status:
        type: string
    type: object
  res.ViewAllOrdersRes:
    properties:
      message:
        type: string
      orders:
        items:
          $ref: '#/definitions/entities.Order'
        type: array
      status:
        type: string
    type: object
  res.ViewCartRes:
    properties:
      cart:
        $ref: '#/definitions/entities.Cart'
      message:
        type: string
      status:
        type: string
    type: object
  res.ViewOrderRes:
    properties:
      message:
        type: string
      order:
        $ref: '#/definitions/entities.Order'
      orderItems:
        items:
          $ref: '#/definitions/entities.OrderItem'
        type: array
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /addToCart/{id}:
    post:
      description: Add a dish to the user's cart
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added to cart
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Add to Cart
      tags:
      - Cart
  /admin/categories:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all categories
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/res.AllCategoriesRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get all categories
      tags:
      - Admin
  /admin/categories/{id}/edit:
    patch:
      consumes:
      - application/json
      description: Update an existing category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category update request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.UpdateCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully updated
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Edit a category
      tags:
      - Admin
  /admin/categories/addCategory:
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category creation request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.CreateCategoryReq'
      produces:
      - application/json
      responses:
        "200":
          description: Category successfully created
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Add a category
      tags:
      - Admin
  /admin/login:
    post:
      consumes:
      - application/json
      parameters:
      - description: Admin Login Request
        in: body
        name: adminLoginReq
        required: true
        schema:
          $ref: '#/definitions/req.AdminLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successful login
          schema:
            $ref: '#/definitions/res.AdminLoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: Admin login
      tags:
      - Admin
  /admin/sellers:
    get:
      consumes:
      - application/json
      description: Get a list of all sellers
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/res.SellerListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get all sellers
      tags:
      - Admin
  /admin/sellers/{id}/block:
    patch:
      consumes:
      - application/json
      description: Block a specific seller by ID
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Seller successfully blocked
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Block a seller
      tags:
      - Admin
  /admin/sellers/{id}/unblock:
    patch:
      consumes:
      - application/json
      description: Unblock a specific seller by ID
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Seller successfully unblocked
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Unblock a seller
      tags:
      - Admin
  /admin/sellers/{id}/verify:
    patch:
      consumes:
      - application/json
      description: Verify a specific seller by ID
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Seller successfully verified
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      - Bearer: []
      summary: Verify a seller
      tags:
      - Admin
  /admin/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: Successful operation
          schema:
            $ref: '#/definitions/res.UserListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - Admin
  /admin/users/{id}/block:
    patch:
      consumes:
      - application/json
      description: Block a specific user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User successfully blocked
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Block a user
      tags:
      - Admin
  /admin/users/{id}/unblock:
    patch:
      consumes:
      - application/json
      description: Unblock a specific user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User successfully unblocked
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Unblock a user
      tags:
      - Admin
  /cart:
    get:
      description: Fetch the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Cart is empty
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: View Cart
      tags:
      - Cart
  /cart/{id}/decrement:
    patch:
      description: Decrement the quantity of a dish in the user's cart
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully decremented cart item
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Decrement Cart Item
      tags:
      - Cart
  /cart/{id}/deleteItem:
    delete:
      description: Delete a dish from the user's cart
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted cart item
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Delete Cart Item
      tags:
      - Cart
  /cart/checkout:
    post:
      consumes:
      - application/json
      description: Place a new order for the user
      parameters:
      - description: New order request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.NewOrderReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully placed order
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Place an order
      tags:
      - User Order
  /cart/empty:
    delete:
      description: Empty the user's cart
      produces:
      - application/json
      responses:
        "200":
          description: Successfully emptied cart
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Empty Cart
      tags:
      - Cart
  /dishes:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of dishes for the user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: string
      - description: Number of items per page
        in: query
        name: l
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched dishes
          schema:
            $ref: '#/definitions/res.DishListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get paginated list of dishes
      tags:
      - User
  /dishes/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific dish by ID for the user
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched dish
          schema:
            $ref: '#/definitions/res.SingleDishRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get a dish
      tags:
      - User
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate and log in as a user
      parameters:
      - description: User login request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.UserLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/res.UserLoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: User Login
      tags:
      - User
  /orders:
    get:
      consumes:
      - application/json
      description: View details of all orders for the user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched orders
          schema:
            $ref: '#/definitions/res.ViewAllOrdersRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: View all orders for the user
      tags:
      - User Order
  /orders/{id}:
    get:
      consumes:
      - application/json
      description: View details of a specific order for the user
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched order
          schema:
            $ref: '#/definitions/res.ViewOrderRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: View a specific order
      tags:
      - User Order
      - Seller Order
  /profile/addAddress:
    post:
      consumes:
      - application/json
      description: Add a new address for the user
      parameters:
      - description: New address request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.NewAddressReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully added address
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Add an address
      tags:
      - User
  /profile/address:
    get:
      consumes:
      - application/json
      description: View details of all addresses for the user
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched addresses
          schema:
            $ref: '#/definitions/res.ViewAddressListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: View all addresses
      tags:
      - User
  /profile/address/{id}:
    get:
      consumes:
      - application/json
      description: View details of a specific address for the user
      parameters:
      - description: Address ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched address
          schema:
            $ref: '#/definitions/res.ViewAddressRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "404":
          description: Address not found
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: View a specific address
      tags:
      - User
  /search/dishes:
    get:
      consumes:
      - application/json
      description: Search for dishes based on a query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched dishes
          schema:
            $ref: '#/definitions/res.DishListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Search dishes
      tags:
      - User
  /search/sellers:
    get:
      consumes:
      - application/json
      description: Search for sellers based on a query
      parameters:
      - description: Search query
        in: query
        name: q
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched sellers
          schema:
            $ref: '#/definitions/res.SellerListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Search sellers
      tags:
      - User
  /seller/addDish:
    post:
      consumes:
      - multipart/form-data
      description: Add a new dish for the seller
      parameters:
      - description: Image file for the dish
        in: formData
        name: image
        required: true
        type: file
      - in: formData
        name: categoryId
        required: true
        type: integer
      - in: formData
        name: description
        type: string
      - in: formData
        name: isAvailable
        type: boolean
      - in: formData
        name: isVeg
        type: boolean
      - in: formData
        minLength: 3
        name: name
        required: true
        type: string
      - in: formData
        minimum: 0
        name: price
        required: true
        type: number
      - in: formData
        minimum: 0
        name: quantity
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully created dish
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Create a dish
      tags:
      - Seller
  /seller/dishes:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all dishes for the seller
      parameters:
      - description: Category Id
        in: query
        name: category
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched dishes
          schema:
            $ref: '#/definitions/res.DishListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get all dishes
      tags:
      - Seller
  /seller/dishes/{id}:
    delete:
      consumes:
      - application/json
      description: Remove a specific dish by ID for the seller
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully deleted dish
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Delete a dish
      tags:
      - Seller
    get:
      consumes:
      - application/json
      description: Retrieve a specific dish by ID for the seller
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched dish
          schema:
            $ref: '#/definitions/res.SingleDishRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get a dish
      tags:
      - Seller
    put:
      consumes:
      - application/json
      description: Modify an existing dish by ID for the seller
      parameters:
      - description: Dish ID
        in: path
        name: id
        required: true
        type: string
      - description: Dish update request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.UpdateDishReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated dish
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Update a dish
      tags:
      - Seller
  /seller/login:
    post:
      consumes:
      - application/json
      description: Authenticate and log in as a seller
      parameters:
      - description: Seller login request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.SellerLoginReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully logged in
          schema:
            $ref: '#/definitions/res.SellerLoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: Seller Login
      tags:
      - Seller
  /seller/orders:
    get:
      consumes:
      - application/json
      description: View details of all orders for the seller
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched orders
          schema:
            $ref: '#/definitions/res.ViewAllOrdersRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: View all orders for the seller
      tags:
      - Seller Order
  /seller/orders/{id}:
    get:
      consumes:
      - application/json
      description: View details of a specific order for the user
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched order
          schema:
            $ref: '#/definitions/res.ViewOrderRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: View a specific order
      tags:
      - User Order
      - Seller Order
    patch:
      consumes:
      - application/json
      description: Update the status of a specific order
      parameters:
      - description: Order ID
        in: path
        name: id
        required: true
        type: string
      - description: Update order status request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.UpdateOrderStatusReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated order
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Update order status
      tags:
      - Seller Order
  /seller/register:
    post:
      consumes:
      - application/json
      description: Register a new seller
      parameters:
      - description: Seller sign-up request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.SellerSignUpReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully signed up
          schema:
            $ref: '#/definitions/res.SellerLoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: Seller Sign Up
      tags:
      - Seller
  /sellers:
    get:
      consumes:
      - application/json
      description: Retrieve a paginated list of sellers for the user
      parameters:
      - description: 'Page number (default: 1)'
        in: query
        name: p
        type: string
      - description: Number of items per page
        in: query
        name: l
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched sellers
          schema:
            $ref: '#/definitions/res.SellerListRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get paginated list of sellers
      tags:
      - User
  /sellers/{id}:
    get:
      consumes:
      - application/json
      description: Retrieve a specific seller by ID for the user
      parameters:
      - description: Seller ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully fetched seller
          schema:
            $ref: '#/definitions/res.SingleSellerRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Get a seller
      tags:
      - User
  /sendOtp:
    post:
      consumes:
      - application/json
      description: Send OTP to the user's registered phone number
      produces:
      - application/json
      responses:
        "200":
          description: Successfully sent OTP
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Send OTP
      tags:
      - User
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: User sign-up request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.UserSignUpReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully signed up
          schema:
            $ref: '#/definitions/res.UserLoginRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      summary: Sign up as a user
      tags:
      - User
  /verifyOtp:
    post:
      consumes:
      - application/json
      description: Verify OTP for the user's registered phone number
      parameters:
      - description: User OTP verification request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/req.UserVerifyOtpReq'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully verified OTP
          schema:
            $ref: '#/definitions/res.CommonRes'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/res.CommonRes'
        "401":
          description: Unauthorized Access
          schema:
            $ref: '#/definitions/res.CommonRes'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/res.CommonRes'
      security:
      - Bearer: []
      summary: Verify OTP
      tags:
      - User
securityDefinitions:
  Bearer:
    description: 'Authentication using a JSON Web Token (JWT). The token should be
      included in the request header named "Authorization". The format of the header
      is: Authorization: Bearer <token>. Replace `<token>` with the actual JWT token.'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
